{"version":3,"sources":["components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["appReducer","state","action","id","type","payload","Date","now","text","completed","filter","item","map","console","log","Object","getOwnPropertyNames","Context","React","createContext","TodosList","items","TodoItem","key","dispatch","index","useContext","useState","setInput","style","display","flexDirection","justifyContent","margin","padding","checked","onChange","name","placeholder","defaultValue","e","target","value","onClick","Todos","useReducer","cb","didRun","useRef","useEffect","current","useEffectOnce","raw","localStorage","getItem","JSON","parse","setItem","stringify","Provider","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d040752d.chunk.js","sourcesContent":["import React, { useReducer, useContext, useEffect, useRef, useState } from 'react';\nimport '../App.css';\n\nfunction appReducer(state, action, id) {\n    switch (action.type) {\n        case 'clear': {\n            return [];\n        }\n        case 'reset': {\n            return action.payload;\n        }\n        case 'add': {\n            return [\n                ...state,\n                {\n                    id: Date.now(),\n                    text: '',\n                    completed: false,\n                },\n            ];\n        }\n        case 'delete': {\n            return state.filter(item => item.id !== action.payload);\n        }\n        case 'completed': {\n            return state.map(item => {\n                if(item.id === action.payload) {\n                    return {\n                        ...item,\n                        completed: !item.completed,\n                    };\n                }\n                return item;\n            });\n        }\n        case 'text': {\n            console.log(state);\n            console.log(action.payload);    \n            console.log(Object.getOwnPropertyNames(action.payload));\n            // return state.map(item => {\n            //     return {\n            //         ...item,\n            //         text: action.payload,\n            //     };\n            // });\n            return state.map((item) => {\n                if(item.id === Object.getOwnPropertyNames(action.payload)) {\n                    return {\n                        ...item,\n                        text: ( item.id in action.payload) ? action.payload : '',\n                    };\n                }\n                return item;\n            });\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nconst Context = React.createContext();\n\nfunction useEffectOnce(cb) {\n    const didRun = useRef(false);\n\n    useEffect(() => {\n        if(!didRun.current) {\n            cb();\n            didRun.current = true;\n        }\n    });\n};\n\nfunction Todos() {\n    const [state, dispatch] = useReducer(appReducer, []);\n\n    //This is a custom hook to handle running useEffect once.\n    useEffectOnce(() => {\n        const raw = localStorage.getItem('data');\n        console.log(\"After getItem\",state);\n        dispatch({ type: 'reset', payload: JSON.parse(raw) });\n    })\n\n    useEffect(() => {\n        localStorage.setItem('data', JSON.stringify(state));\n        console.log(\"After setItem\",state);\n    },\n    [state]\n    );\n\n    return (\n        <Context.Provider value={dispatch}>\n            <h1>Todos App</h1>\n            <button style={{margin: \"4px\"}} onClick={() => dispatch({ type: 'add' })}>New Todo</button>\n            <button style={{margin: \"4px\"}} onClick={() => dispatch({ type: 'clear' })}>Clear Todos</button>\n            <br />\n            <br />\n            <TodosList items={state} />\n        </Context.Provider>\n    )\n}\n\nfunction TodosList({ items }) {\n    return items.map(item => <TodoItem key={item.id} {...item} />)\n}\n\nfunction TodoItem({ id, completed, text, index }){\n    const dispatch = useContext(Context);\n    const [input, setInput] = useState('');\n\n    const handleInputChange = (e) => {\n        setInput(e.target.value);\n        console.log({id});\n        //Last character of text was not saved when I had payload: input, that is why I have it like is right now.\n        dispatch({ type: 'text', payload: {[e.target.name]: e.target.value}});\n        console.log(id);\n    };\n\n    return (\n        <div\n            style={{\n                display: 'block',\n                flexDirection: 'row',\n                justifyContent: 'space-between',\n                margin: '2px',\n                padding: '2px',\n            }}\n        >\n        <input type=\"checkbox\" checked={completed} onChange={() => dispatch({ type: 'completed', payload: id })} />\n    \n        <input type=\"text\" name={id} index={id} placeholder=\"Type in Todo\" defaultValue={text} onChange={handleInputChange} />\n        <button onClick={() => dispatch({ type: 'delete', payload: id })}>Delete</button>\n        </div>\n        );\n}\n\nexport default Todos;\n","import React from 'react';\nimport Todos from './components/Todos';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todos />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}