{"version":3,"sources":["components/Tasks.js","App.js","serviceWorker.js","index.js"],"names":["appReducer","state","action","type","payload","id","Date","now","text","completed","filter","item","map","input","Context","React","createContext","TasksList","items","TaskItem","key","dispatch","useContext","useState","setInput","className","checked","onChange","autoFocus","name","index","placeholder","defaultValue","e","target","value","aria-hidden","onClick","Tasks","useReducer","cb","didRun","useRef","useEffect","current","useEffectOnce","raw","localStorage","getItem","JSON","parse","setItem","stringify","count","style","cursor","length","Provider","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e2cc372.chunk.js","sourcesContent":["import React, { useReducer, useEffect, useRef, useContext, useState } from 'react';\nimport '../App.css';\n\nfunction appReducer(state =[], action) {\n    switch (action.type) {\n        case 'clear': {\n            return [];\n        }\n        case 'reset': {\n            return action.payload;\n        }\n        case 'add': {\n            return [\n                {\n                    id: Date.now(),\n                    text: '',\n                    completed: false,\n                },\n                ...state || [],\n            ];\n        }\n        case 'delete': {\n            return state.filter(item => item.id !== action.payload);\n        }\n        case 'completed': {\n            return state.map(item => {\n                if(item.id === action.payload) {\n                    return {\n                        ...item,\n                        completed: !item.completed,\n                    };\n                }\n                return item;\n            });\n        }\n        case 'text': {\n            return state.map(item => {\n                if(item.id === action.payload.id) {\n                    return {\n                        ...item,\n                        text: action.payload.input,\n                    };\n                }\n                return item;\n            });\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nconst Context = React.createContext();\n\nfunction useEffectOnce(cb) {\n    const didRun = useRef(false);\n\n    useEffect(() => {\n        if(!didRun.current) {\n            cb();\n            didRun.current = true;\n        }\n    });\n};\n\nfunction Tasks() {\n    const [state, dispatch] = useReducer(appReducer, []);\n\n    //This is a custom hook to handle running useEffect once.\n    useEffectOnce(() => {\n        const raw = localStorage.getItem('data');\n        dispatch({ type: 'reset', payload: JSON.parse(raw) });\n    })\n\n    useEffect(() => {\n        localStorage.setItem('data', JSON.stringify(state));\n    },\n    [state]\n    );\n\n    // count displays the number of items in the list.\n    const count = <b style={{cursor: \"default\"}}>{state && state.length} {state && state.length === 1  ? \"item in list.\" : \"items in list.\" }</b>;\n\n    return (\n        <Context.Provider value={dispatch}>\n            <h1 style={{cursor: \"default\"}}>Task App</h1>\n            <header className=\"Options\">\n                <button style={{margin: \"4px\", cursor: \"pointer\"}} onClick={() => dispatch({ type: 'add' })}>Create Task</button>\n                <button style={{margin: \"4px\", cursor: \"pointer\"}} onClick={() => dispatch({ type: 'clear' })}>Delete Every Task</button>\n            </header>\n            <br />\n            { state && state.length >= 1 ? count : null }\n            <div className=\"Container\">\n                <TasksList items={state} />\n            </div>\n        </Context.Provider>\n    )\n}\n\nfunction TasksList({ items }) {\n    return items && items.map(item => <TaskItem key={item.id} {...item} />)\n}\n\nfunction TaskItem({ id, completed, text}){\n    const dispatch = useContext(Context);\n    const [input, setInput] = useState('');\n\n    const handleInputChange = (e) => {\n        //Last character of text was not saved when I had payload: input, that is why I have it like is right now.\n        let input = e.target.value;\n        setInput(e.target.value);\n        dispatch({ type: 'text', payload: {id, input}});\n    };\n\n    return (\n        <div className=\"Task\">\n        <input type=\"checkbox\" checked={completed} onChange={() => dispatch({ type: 'completed', payload: id })} />\n    \n        <textarea type=\"text\" autoFocus name={id} index={id} placeholder=\"Type in task, note, shopping list or shenanigan...\" defaultValue={text} onChange={handleInputChange} />\n        <i className=\"fa fa-trash\" aria-hidden=\"true\" onClick={() => dispatch({ type: 'delete', payload: id })}></i>\n        </div>\n        );\n}\n\nexport default Tasks;\n","import React from 'react';\nimport Tasks from './components/Tasks';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}